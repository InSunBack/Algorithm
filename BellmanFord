import java.util.*;
import java.io.*;

class Edge {
    int from;
    int to;
    int cost;

    public Edge(int from, int to, int cost) {
        this.from = from;
        this.to = to;
        this.cost = cost;
    }
}

public class BellmanFord {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    static StringTokenizer st;
    static int V, E;
    static ArrayList<Edge> nodeArray;
    static long[] distance;
    static boolean[] visited;

    public static void main(String[] args) throws IOException {
        st = new StringTokenizer(br.readLine());

        V = Integer.parseInt(st.nextToken());
        E = Integer.parseInt(st.nextToken());
        nodeArray = new ArrayList<>();

        for(int i = 0; i < E; i++) {
            st = new StringTokenizer(br.readLine());
            int from = Integer.parseInt(st.nextToken());
            int to = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());

            nodeArray.add(new Edge(from, to, cost));
        }

        distance = new long[V + 1];
        Arrays.fill(distance, Integer.MAX_VALUE);
        int Start = 1; //Integer.parseInt(br.readLine());
        if(!bellmanFord(Start)) {
            System.out.println("-1");
        } else {
            for (int i = 2; i <= V; i++) {
                if (distance[i] == Integer.MAX_VALUE) {
                    bw.write("-1\n");
                } else {
                    bw.write(distance[i] + "\n");
                }
            }
        }

        br.close();
        bw.flush();
        bw.close();

    }

    static boolean bellmanFord(int start) {
        distance[start] = 0;

        for (int i = 0; i < V - 1; i++) {
            for (int j = 0; j < E; j++) {
                Edge edge = nodeArray.get(j);
                if (distance[edge.from] != Integer.MAX_VALUE && distance[edge.to] > distance[edge.from] + edge.cost) {
                    distance[edge.to] = distance[edge.from] + edge.cost;
                }
            }
        }

        for (int i = 0; i < E; i++) {
            Edge edge = nodeArray.get(i);
            if (distance[edge.from] != Integer.MAX_VALUE && distance[edge.to] > distance[edge.from] + edge.cost) {
                return false;
            }
        }
        return true;
    }
}